// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package sharedFile

import (
	"encoding/json"
	v1 "intelligent-course-aware-ide/api/sharedFile/v1"
	"net/http"

	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/gorilla/websocket"

	"intelligent-course-aware-ide/internal/logic/socket"
)

var wsUpgrader = websocket.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

// 处理WebSocket连接
func (c *ControllerV1) HandleSharedFileConnect(r *ghttp.Request) {
	var req *v1.ConnectSharedFileReq
	if err := r.Parse(&req); err != nil {
		r.Response.WriteJson(g.Map{"code": -1, "message": err.Error()})
		return
	}

	// 验证用户是否有权限连接该文件
	count, err := g.Model("SharedFilePartners").
		Where("sharedFileId=? AND userId=?", req.FileId, req.UserId).
		Count()
	if err != nil || count == 0 {
		r.Response.WriteJson(g.Map{"code": -1, "message": "User has no permission to access this file"})
		return
	}

	// Use gorilla/websocket to Upgrad HTTP connections to WebSocket
	conn, err := wsUpgrader.Upgrade(r.Response.Writer, r.Request, nil)
	if err != nil {
		g.Log().Error(r.GetCtx(), "WebSocket upgrade error:", err)
		r.Response.WriteJson(g.Map{"code": -1, "message": "WebSocket upgrade failed"})
		return
	}

	// 将连接添加到管理器
	wsManager := socket.GetWebSocketManager()
	wsManager.AddConnection(req.FileId, req.UserId, conn)

	// 监听WebSocket消息
	defer wsManager.RemoveConnection(req.FileId, req.UserId)

	for {
		_, message, err := conn.ReadMessage()
		if err != nil {
			g.Log().Error(r.GetCtx(), "WebSocket read error:", err)
			break
		}

		// 解析操作消息
		var op socket.OperationMessage
		if err := json.Unmarshal(message, &op); err != nil {
			g.Log().Error(r.GetCtx(), "Invalid operation message:", err)
			continue
		}

		// 验证和处理操作
		if err := socket.ProcessFileOperation(r.GetCtx(), op); err != nil {
			// 可选：发送错误消息给客户端
			g.Log().Error(r.GetCtx(), "Failed to process operation:", err)
			continue
		}

		// 广播操作给其他用户
		wsManager.BroadcastToFile(op.FileId, message, op.UserId)

		// 发布到Redis以便异步持久化
		wsManager.PublishOperation(r.GetCtx(), op)
	}
}
