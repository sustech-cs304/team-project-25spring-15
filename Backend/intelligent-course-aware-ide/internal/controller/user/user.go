// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package user

import (
	"context"
	"errors"
	"intelligent-course-aware-ide/internal/dao"
	"intelligent-course-aware-ide/internal/model/entity"
	"reflect"
	"time"

	"github.com/gogf/gf/util/gconv"
	"github.com/gogf/gf/v2/frame/g"
)

func CheckUserHasPermssion(ctx context.Context, UserToDeleteId int64, userId int64) (success bool, err error) {
	var userToDelete *entity.Users
	err = dao.Users.Ctx(ctx).WherePri(UserToDeleteId).Scan(&userToDelete)
	if err != nil || userToDelete == nil {
		return false, errors.New("maybe it is because user to delete not found")
	}

	var user *entity.Users
	err = dao.Users.Ctx(ctx).WherePri(userId).Scan(&user)
	if err != nil || user == nil {
		return false, errors.New("maybe it is because user not found")
	}

	if user.UserId == userToDelete.UserId || (user.Identity == "superuser" && userToDelete.Identity != "superuser") {
		return true, nil
	} else {
		return false, errors.New("user is not the user to be deleted or user to delete is superuser")
	}

}

func ConstructUpdateUserInfo(info interface{}) g.Map {
	updateUserInfo := g.Map{}
	val := reflect.ValueOf(info)
	typ := val.Type()
	for i := 1; i < val.NumField(); i++ {
		field := val.Field(i)
		typeField := typ.Field(i)
		fieldName := typeField.Name
		fieldValue := field.Interface()
		if !needToUpdate(fieldValue) {
			updateUserInfo[fieldName] = fieldValue
		}
	}
	return updateUserInfo
}

func needToUpdate(fieldValue any) bool {
	switch val := fieldValue.(type) {
	case string:
		return val == ""
	case int, int64, int32:
		return gconv.Int64(val) == 0
	case float64, float32:
		return gconv.Float64(val) == 0
	case time.Time:
		return val.IsZero()
	default:
		return reflect.DeepEqual(fieldValue, reflect.Zero(reflect.TypeOf(fieldValue)).Interface())
	}
}
